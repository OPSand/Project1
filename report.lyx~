#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing double
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Project 1, FYS 3150 / 4150, fall 2013
\end_layout

\begin_layout Author
Nathalie Bonatout and Odd Petter Sand
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this project we will solve the one-dimensional Poissson equation with
 Dirichlet boundary conditions by rewriting it as a set of linear equations.
\end_layout

\begin_layout Standard
To be more explicit we will solve the equation 
\begin_inset Formula 
\[
-u''(x)=f(x),\hspace{0.5cm}x\in(0,1),\hspace{0.5cm}u(0)=u(1)=0.
\]

\end_inset

and we define the discretized approximation to 
\begin_inset Formula $u$
\end_inset

 as 
\begin_inset Formula $v_{i}$
\end_inset

 with grid points 
\begin_inset Formula $x_{i}=ih$
\end_inset

 in the interval from 
\begin_inset Formula $x_{0}=0$
\end_inset

 to 
\begin_inset Formula $x_{n+1}=1$
\end_inset

.
 The step length or spacing is defined as 
\begin_inset Formula $h=1/(n+1)$
\end_inset

.
 We have then the boundary conditions 
\begin_inset Formula $v_{0}=v_{n+1}=0$
\end_inset

.
 We approximate the second derivative of 
\begin_inset Formula $u$
\end_inset

 with 
\begin_inset Formula 
\[
-\frac{v_{i+1}+v_{i-1}-2v_{i}}{h^{2}}=f_{i}\hspace{0.5cm}\mathrm{for}\hspace{0.1cm}i=1,\dots,n,
\]

\end_inset

where 
\begin_inset Formula $f_{i}=f(x_{i})$
\end_inset

.
\end_layout

\begin_layout Standard
(Author's note: This text, and the text introducing the various exercises,
 is taken from the project description provided at the course website.)
\end_layout

\begin_layout Section
Exercises
\end_layout

\begin_layout Subsection
Exercise a)
\end_layout

\begin_layout Standard
We start with the given equation
\end_layout

\begin_layout Standard
\begin_inset Formula $-\frac{v_{i-1}-2v_{i}+v_{i+1}}{h^{2}}=f_{i}$
\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $i\in[1,n]\cap\mathbb{N}$
\end_inset

 and 
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

.
 We will assume that 
\begin_inset Formula $n\geqslant3$
\end_inset

 and that 
\begin_inset Formula $v_{0}=v_{n+1}=0$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $-v_{i-1}+2v_{i}-v_{i+1}=h^{2}f_{i}\equiv\widetilde{b}_{i}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left[\begin{array}{ccc}
-1 & 2 & -1\end{array}\right]\left[\begin{array}{c}
v_{i-1}\\
v_{i}\\
v_{i+1}
\end{array}\right]=\widetilde{b}_{i}$
\end_inset


\end_layout

\begin_layout Standard
Now we expand these vectors from 3 elements to 
\begin_inset Formula $n$
\end_inset

 elements.
 Note that the 
\begin_inset Formula $i$
\end_inset

th element of the row vector should be 2 and the 
\begin_inset Formula $i$
\end_inset

th element of the column vector should be 
\begin_inset Formula $v_{i}$
\end_inset

 after the expansion:
\end_layout

\begin_layout Standard
\begin_inset Formula $\left[\begin{array}{ccccccc}
0 & \cdots & -1 & 2 & -1 & \cdots & 0\end{array}\right]\left[\begin{array}{c}
v_{1}\\
\vdots\\
v_{i-1}\\
v_{i}\\
v_{i+1}\\
\vdots\\
v_{n}
\end{array}\right]=\widetilde{b}_{i}$
\end_inset


\end_layout

\begin_layout Standard
Note that in the row vector 2 can very well be the first or last element,
 in which case the preceding presentation can be a little misleading.
 We further recognize the row vector as the 
\begin_inset Formula $i$
\end_inset

th row of the 
\begin_inset Formula $n\times n$
\end_inset

 matrix 
\begin_inset Formula $\mathbf{A}$
\end_inset

 (defined such that 
\begin_inset Formula $A_{ij}=2\delta_{ij}-\delta_{i(j-1)}-\delta_{i(j+1)}$
\end_inset

 ) and get the inner product
\end_layout

\begin_layout Standard
\begin_inset Formula $\mathbf{A}_{i}\cdot\mathbf{v}=\widetilde{b}_{i}$
\end_inset


\end_layout

\begin_layout Standard
and remembering that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $i\in[1,n]$
\end_inset

, by the definition of matrix multiplication
\end_layout

\begin_layout Standard
\begin_inset Formula $\mathbf{A}\mathbf{v}=\mathbf{\widetilde{b}}$
\end_inset


\end_layout

\begin_layout Standard
which is what we wanted to show.
\end_layout

\begin_layout Subsection
Exercise b)
\end_layout

\begin_layout Standard
The algorithm we will use is as follows: First we do forward subsitution
 by subtracting from the current row a multiple of the row before it.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $A_{i}=A_{i}-x_{i}A_{i-1}$
\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset Formula $x_{i}$
\end_inset

 is the factor that cause the term 
\begin_inset Formula $a_{i}$
\end_inset

 to cancel out.
 Before the first step, the rows 
\begin_inset Formula $i-1$
\end_inset

 and 
\begin_inset Formula $i$
\end_inset

 look like this (the * indicates a value that has been changed by the algoritm)
\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{ccccccc}
\cdots & 0 & b_{i-1}^{*} & c_{i-1} & 0 & 0 & \cdots\\
\cdots & 0 & a_{i} & b_{i} & c_{i} & 0 & \cdots
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
and our goal is that it look like this after the forward substitution
\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{ccccccc}
\cdots & 0 & b_{i-1}^{*} & c_{i-1} & 0 & 0 & \cdots\\
\cdots & 0 & 0 & b_{i}^{*} & c_{i} & 0 & \cdots
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
(note that 
\begin_inset Formula $c_{i}$
\end_inset

 is unchanged).
 When we reach the bottom, we do a backward subsitution by adding to the
 current row a multiple of the row below it and then dividing the last element
 by itself to make the last element equal to 1:
\end_layout

\begin_layout Standard
\begin_inset Formula $A_{i}=A_{i}-c_{i}A_{i+1}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $A_{i}=\frac{A_{i}}{b_{i}^{*}}$
\end_inset


\end_layout

\begin_layout Standard
That is to say, we go from
\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{cccccc}
\cdots & 0 & b_{i}^{*} & c_{i} & 0 & \cdots\\
\cdots & 0 & 0 & 1 & 0 & \cdots
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
to
\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{cccccc}
\cdots & 0 & 1 & 0 & 0 & \cdots\\
\cdots & 0 & 0 & 1 & 0 & \cdots
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
Naturally, we also have to do equivalent operations on the vector 
\series bold

\begin_inset Formula $\mathbf{\widetilde{b}}$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 on the other side of the equation.
 We will not calculate any unnecessary values, i.e.
 values that will not be used by the program later on.
 Hence the algoritm looks like this (number of flops in parantheses):
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $i$
\end_inset

 : 
\begin_inset Formula $2\longrightarrow n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $x_{i}=\frac{a_{i}}{b_{i-1}^{*}}\;$
\end_inset

 (
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $b_{i}=b_{i}-x_{i}c_{i-1}\;$
\end_inset

(
\begin_inset Formula $2n$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\widetilde{b}_{i}=\widetilde{b}_{i}-x_{i}\widetilde{b}_{i-1}\;$
\end_inset

(
\begin_inset Formula $2n$
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula $\widetilde{b}_{n}=\frac{\widetilde{b}_{n}}{b_{n}}\;(1)$
\end_inset


\end_layout

\begin_layout Standard
For 
\begin_inset Formula $i$
\end_inset

 : 
\begin_inset Formula $n-1\longrightarrow1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\widetilde{b}_{i}=\widetilde{b}_{i}-c_{i}\widetilde{b}_{i+1}\;$
\end_inset

(
\begin_inset Formula $2n$
\end_inset

)
\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $\widetilde{b}_{i}=\frac{\widetilde{b}_{i}}{b_{i}}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $\;$
\end_inset

 (
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Standard
This makes the total running time of the algorihm 
\begin_inset Formula $8n$
\end_inset

 (actually, it is 
\begin_inset Formula $8(n-1)$
\end_inset

, but we are mostly concerned with the performance for large 
\begin_inset Formula $n$
\end_inset

, where 
\begin_inset Formula $n\approx n-1$
\end_inset

).
\end_layout

\begin_layout Standard
If the matrix is symmetric, so that 
\begin_inset Formula $a_{i}=c_{i-1},$
\end_inset

 then 
\begin_inset Formula $x_{i}c_{i-1}=\frac{a_{i}^{2}}{b_{i-1}^{*}}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $a_{i}=c_{i-1}=k$
\end_inset

 for all 
\begin_inset Formula $i$
\end_inset

, we have a special case where 
\begin_inset Formula $k=\pm1$
\end_inset

.
 Then 
\begin_inset Formula $x_{i}=\pm\frac{1}{b_{i-1}^{*}}$
\end_inset

, 
\begin_inset Formula $k^{2}=1$
\end_inset

 and 
\begin_inset Formula $x_{i}c_{i-1}=\frac{1}{b_{i-1}^{*}}=-x_{i}\equiv y_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
Furthermore, 
\begin_inset Formula $c_{i}\widetilde{b}_{i+1}=k\widetilde{b}_{i+1}=\mp\widetilde{b}_{i+1}$
\end_inset

 (note: opposite of the sign of 
\begin_inset Formula $k$
\end_inset

).
 The algorithm will then look like this for 
\begin_inset Formula $k=-1$
\end_inset

:
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $i$
\end_inset

 : 
\begin_inset Formula $2\longrightarrow n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $y_{i}=\frac{1}{b_{i-1}^{*}}\;$
\end_inset

 (
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $b_{i}=b_{i}-y_{i}\;$
\end_inset

(
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\widetilde{b}_{i}=\widetilde{b}_{i}+y_{i}\widetilde{b}_{i-1}\;$
\end_inset

(
\begin_inset Formula $2n$
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula $\widetilde{b}_{n}=\frac{\widetilde{b}_{n}}{b_{n}}\;(1)$
\end_inset


\end_layout

\begin_layout Standard
For 
\begin_inset Formula $i$
\end_inset

 : 
\begin_inset Formula $n-1\longrightarrow1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\widetilde{b}_{i}=\widetilde{b}_{i}+\widetilde{b}_{i+1}\;$
\end_inset

(
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $\widetilde{b}_{i}=\frac{\widetilde{b}_{i}}{b_{i}}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $\;$
\end_inset

 (
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Standard
This gives a total running time of 
\begin_inset Formula $6n$
\end_inset

 for this implementation of the algorithm, which we ended up using for this
 project.
\end_layout

\begin_layout Standard
The following figures are the plots given after using our tridiagonal solver
 (in blue) and after computing the results with the following equation,
 given in the project description (in red here); 
\begin_inset Formula 
\[
u(x)=1-(1-e^{-10})\cdot x-e^{-10x}
\]

\end_inset


\end_layout

\begin_layout Standard
We can see that the bigger number of points we take, the better accuracy
 we get, which is expected: by increasing our number of points, we increase
 the number of samples to do our computation.
 But we too increase the probability of meaningful round-off errors happening,
 since two consecutives results will be really close if we have a large
 number of points
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align left
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\noindent
\align left
\begin_inset Graphics
	filename Screens/Graph_b/n=10.png
	scale 45

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Analytical and numerical results for n = 10
\end_layout

\end_inset


\end_layout

\end_inset

 
\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\noindent
\align right
\begin_inset Graphics
	filename Screens/Graph_b/n = 100.png
	scale 45

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Analytical and numerical results for n = 100
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Screens/Graph_b/n=1000.png
	scale 45

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Analytical and numerical results for n = 1 000
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Exercise c)
\end_layout

\begin_layout Standard
In this exercise we compute the relative error in the data set 
\begin_inset Formula $i=1,\dots,n$
\end_inset

, by setting up 
\begin_inset Formula 
\[
\epsilon_{i}=log_{10}\left(\left|\frac{v_{i}-u_{i}}{u_{i}}\right|\right),
\]

\end_inset

as function of 
\begin_inset Formula $log_{10}(h)$
\end_inset

 for the function values 
\begin_inset Formula $u_{i}$
\end_inset

 and 
\begin_inset Formula $v_{i}$
\end_inset

.
 Here, 
\begin_inset Formula $v_{i}$
\end_inset

 is our numerical solution, given by our tridiagonal solver.
 
\begin_inset Formula $u_{i}$
\end_inset

 is the analytical solution.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of points
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $100$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $100000$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Step length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10^{-4}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1.10^{-5}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max.
 relative error (%)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0,07$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0,007$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Maximum relative error for different step lengths
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main point here, is that by increasing the number of sample in our interval,
 we can see that our results are getting more accurate.
 But by doing that, we induce a round-off error, which explains why we aren't
 getting any smaller error.
 The consecutive results are indeed getting closer and closer as the number
 of points grows,
\end_layout

\begin_layout Standard
But it is also important to underline that the points for which the relative
 error between the analytical and the numerical results is maximum, are
 the boundary points.
 Thus, wathever number of points we take, the relative error will remain
 on these points, significant.
\end_layout

\begin_layout Standard

\series bold
TODO:
\series default
 Step length too small induces rounding errors.
\end_layout

\begin_layout Subsection
Exercise d)
\end_layout

\begin_layout Standard
We will try to show here the differences between our tridiagonal solver,
 and the LU function implemented in Armadillo (as lib.cpp would not play
 nice in Windows, at least not for the moment).
 We will especially look at two things: the time spent inside these functions,
 and the number of floating point operations (FLOPS).
 In order to compute the elapsed time for each function, we will use the
 functions available in the library time.h.
\end_layout

\begin_layout Standard
In terms of FLOPS, to solve a n system, our tridiagonal solver needs 
\begin_inset Formula 
\[
6n
\]

\end_inset


\end_layout

\begin_layout Standard
With the LU function, decomposing a 
\begin_inset Formula $n\times n$
\end_inset

 matrix costs 
\begin_inset Formula 
\[
\frac{2}{3}n^{3}
\]

\end_inset


\end_layout

\begin_layout Standard
We can already deduce that our tridiagonal solver will probably run faster
 than the LU function.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dimension of 
\begin_inset Formula $n\times n$
\end_inset

 matrix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time: Tridiagonal solver (s)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time: LU decomposition (s)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=10$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\approx0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\approx0$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=100$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.001$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.001$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=500$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.001$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.03$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=1000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.001$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.124$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=2500$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.003$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.769$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=5000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.004$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3.104$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=10^{4}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.006$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OoM*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=10^{5}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.057$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OoM*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=10^{6}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0.575$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OoM*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=10^{7}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5.769$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OoM*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n=10^{8}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OoM*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OoM*
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Running times for LU decomposition and tridiagonal algorithm.
 (*: Out of Memory error when initializing matrices.)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset

From our results, we make the following observations:
\end_layout

\begin_layout Itemize
Our tridiagonal solver is indeed 
\begin_inset Formula $O(n)$
\end_inset

, excepting some tiny overhead that is only significant when 
\begin_inset Formula $n$
\end_inset


\begin_inset Formula $\lesssim5000$
\end_inset

.
\end_layout

\begin_layout Itemize
Given that 
\begin_inset Formula $\frac{3.104}{0.769}\approx\frac{0.124}{0.03}\approx2^{2}$
\end_inset

 and 
\begin_inset Formula $\frac{0.769}{0.124}\approx2.5^{2}$
\end_inset

, it is evident when comparing the values of 
\begin_inset Formula $n$
\end_inset

 that Armadillo's LU implementation runs as 
\begin_inset Formula $O(n^{2})$
\end_inset

, again with some tiny overhead for small 
\begin_inset Formula $n$
\end_inset

.
 This is significantly better scaling than we expect from the standard LU
 algorithm, and thus we conclude that Armadillo uses a more efficient implementa
tion.
 Had we chosen to use lib.cpp instead, we would expect it to run as 
\begin_inset Formula $O(n^{3})$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
.
\end_layout

\begin_layout Standard
The reason for these differences are, naturally, that our tridiagonal solver
 is optimized for the problem at hand, using information about our matrix
 that is not available to the general LU algorithm.
 More to the point, the LU decomposition needs to calculate a lot of values
 that our tridiagonal method ignores, since we know that our matrix is very
 sparse.
\end_layout

\begin_layout Subsection
Exercise e)
\end_layout

\begin_layout Standard
In this exercise we are investigating matrix multiplication in row major
 order versus column major order with regards to running time.
\end_layout

\begin_layout Standard
The task here is to write a small program which sets up two random (use
 the ran0 function in the library lib.cpp to initialize the matrix) double
 precision valued matrices of dimension 
\begin_inset Formula $5000\times5000$
\end_inset

.
 (NOTE: The original value of 
\begin_inset Formula $10^{4}\times10^{4}$
\end_inset

 proved too memory intensive for our poor laptops, so we were forced to
 scale it down.)
\end_layout

\begin_layout Standard
The multiplication of two matrices 
\begin_inset Formula ${\bf A}={\bf BC}$
\end_inset

 could then take the following form in standard row-major order 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstset
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

language=c++
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

      for(j=0 ; j < n ; j++) {
\end_layout

\begin_layout Plain Layout

         for(k=0 ; k < n ; k++) {
\end_layout

\begin_layout Plain Layout

            a[i][j]+=b[i][k]*c[k][j]
\end_layout

\begin_layout Plain Layout

         }
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\end_inset

 and in a column-major order as 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstset
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

language=c++
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

      for(i=0 ; i < n ; i++) {
\end_layout

\begin_layout Plain Layout

         for(k=0 ; k < n ; k++) {
\end_layout

\begin_layout Plain Layout

            a[i][j]+=b[i][k]*c[k][j]
\end_layout

\begin_layout Plain Layout

         }
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(NOTE: We implemented this using dynamic memory allocation, as lib.cpp proved
 difficult to add to the project in Visual C++.)
\end_layout

\begin_layout Standard
The output of our program:
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename exE.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Timings of row and column major multiplications 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
TODO:
\series default
 Explain this.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
From this project, we have learned the following things:
\end_layout

\begin_layout Itemize
Specialized algorithms can save significant computing time and memory.
\end_layout

\begin_layout Itemize
Error analysis shows that there is a tradeoff to consider when choosing
 a step size in a numerical method, aside from running time.
 A smaller step size is only an improvement up to a point, where a smaller
 step size may introduce loss of precision due to rounding errors - as such,
 there exists a 
\begin_inset Quotes eld
\end_inset

sweet spot
\begin_inset Quotes erd
\end_inset

 where one can get the lowest possible relative error.
 Analysis of the output compared to a known solution can help locate this
 sweet spot.
\end_layout

\begin_layout Itemize
Row major order vs.
 column major order matters when you do matrix multiplication, due to differing
 average memory jump length.
\end_layout

\begin_layout Subsection
Critique
\end_layout

\begin_layout Standard
We would like to provide the following items of feedback for future versions
 of this project:
\end_layout

\begin_layout Itemize
We would be very thankful if lib.cpp were easier to include in our Visual
 C++ projects on Windows.
 We ended up using Armadillo instead, which worked well enough (and even
 produced some interesting deviations from the expected result in exercise
 d), but for future projects it would be nice if we got it to work from
 the get-go.
\end_layout

\begin_layout Itemize
It would be nice if Armadillo was introduced even earlier - we ended up
 doing some things twice because we wanted to start early and hadn't gotten
 Armadillo to work yet.
\end_layout

\begin_layout Itemize
Even though we were able to make Armadillo work on Windows and shared the
 method, many other students found it cumbersome.
 We recommend putting together a guide on how to do this (and we're happy
 to share our experiences).
\end_layout

\begin_layout Itemize
We're starting to feel that running our code on 4 GB of RAM is cutting it
 pretty close, as we were restricted to matrices of sizes less than 
\begin_inset Formula $\sim10^{4}\times10^{4}$
\end_inset

.
 Perhaps this should be taken into account in the project description.
 Then again, it is useful to have an idea of how much you can do with matrices
 before you run into trouble.
\end_layout

\end_body
\end_document
